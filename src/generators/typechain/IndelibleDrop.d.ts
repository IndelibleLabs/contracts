/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IndelibleDropInterface extends ethers.utils.Interface {
  functions: {
    "COLLECTOR_FEE()": FunctionFragment;
    "DEFAULT_APPROVAL_LIFESPAN()": FunctionFragment;
    "OPERATOR_FILTER_REGISTRY()": FunctionFragment;
    "addChunk(uint256,uint256,bytes)": FunctionFragment;
    "addDrop(uint256,(address[],string[][],string,uint256,uint256,uint256,uint256,uint256,bool,bool))": FunctionFragment;
    "airdrop(uint256,uint256,address[])": FunctionFragment;
    "approvalLifespans(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "checkProHolder(address)": FunctionFragment;
    "contractData()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "dropIdToFile(uint256)": FunctionFragment;
    "dropIdToMetadata(uint256)": FunctionFragment;
    "getDrop(uint256)": FunctionFragment;
    "isAllowListActive()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isContractSealed()": FunctionFragment;
    "mint(uint256,uint256,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "onAllowList(address,bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "sealContract()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setApprovalLifespanDays(uint128)": FunctionFragment;
    "setContractData((string,string,string,string,string,uint256,string))": FunctionFragment;
    "setMaxPerAddress(uint256,uint256)": FunctionFragment;
    "setMaxPerAllowList(uint256,uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleAllowListMint(uint256)": FunctionFragment;
    "togglePublicMint(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawRecipients(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COLLECTOR_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_APPROVAL_LIFESPAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChunk",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addDrop",
    values: [
      BigNumberish,
      {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxSupply: BigNumberish;
        maxPerAddress: BigNumberish;
        maxPerAllowList: BigNumberish;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "airdrop",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalLifespans",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkProHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dropIdToFile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dropIdToMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowListActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractSealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onAllowList",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sealContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalLifespanDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractData",
    values: [
      {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAddress",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAllowList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleAllowListMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "togglePublicMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRecipients",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLECTOR_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_APPROVAL_LIFESPAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_FILTER_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvalLifespans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkProHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropIdToFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dropIdToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalLifespanDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAllowListMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePublicMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRecipients",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export class IndelibleDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndelibleDropInterface;

  functions: {
    COLLECTOR_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_APPROVAL_LIFESPAN(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDrop(
      id: BigNumberish,
      drop: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxSupply: BigNumberish;
        maxPerAddress: BigNumberish;
        maxPerAllowList: BigNumberish;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdrop(
      id: BigNumberish,
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvalLifespans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    checkProHolder(
      collector: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, string] & {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumber;
        royaltiesRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    dropIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dropIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDrop(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[][],
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean
        ] & {
          chunks: string[];
          traits: string[][];
          mimetype: string;
          publicMintPrice: BigNumber;
          allowListPrice: BigNumber;
          maxSupply: BigNumber;
          maxPerAddress: BigNumber;
          maxPerAllowList: BigNumber;
          isPublicMintActive: boolean;
          isAllowListActive: boolean;
        }
      ]
    >;

    isAllowListActive(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContractSealed(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      id: BigNumberish,
      count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalLifespanDays(
      lifespanDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAddress(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAllowList(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleAllowListMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    togglePublicMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        imageUrl: string;
        recipientAddress: string;
        percentage: BigNumber;
      }
    >;
  };

  COLLECTOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_APPROVAL_LIFESPAN(overrides?: CallOverrides): Promise<BigNumber>;

  OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<string>;

  addChunk(
    id: BigNumberish,
    chunkIndex: BigNumberish,
    chunk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDrop(
    id: BigNumberish,
    drop: {
      chunks: string[];
      traits: string[][];
      mimetype: string;
      publicMintPrice: BigNumberish;
      allowListPrice: BigNumberish;
      maxSupply: BigNumberish;
      maxPerAddress: BigNumberish;
      maxPerAllowList: BigNumberish;
      isPublicMintActive: boolean;
      isAllowListActive: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdrop(
    id: BigNumberish,
    count: BigNumberish,
    recipients: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvalLifespans(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  checkProHolder(
    collector: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, string] & {
      name: string;
      description: string;
      image: string;
      banner: string;
      website: string;
      royalties: BigNumber;
      royaltiesRecipient: string;
    }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  dropIdToFile(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  dropIdToMetadata(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDrop(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      string[][],
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      chunks: string[];
      traits: string[][];
      mimetype: string;
      publicMintPrice: BigNumber;
      allowListPrice: BigNumber;
      maxSupply: BigNumber;
      maxPerAddress: BigNumber;
      maxPerAllowList: BigNumber;
      isPublicMintActive: boolean;
      isAllowListActive: boolean;
    }
  >;

  isAllowListActive(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContractSealed(overrides?: CallOverrides): Promise<boolean>;

  mint(
    id: BigNumberish,
    count: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onAllowList(
    addr: string,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sealContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalLifespanDays(
    lifespanDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractData(
    _contractData: {
      name: string;
      description: string;
      image: string;
      banner: string;
      website: string;
      royalties: BigNumberish;
      royaltiesRecipient: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAddress(
    id: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAllowList(
    id: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    newMerkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleAllowListMint(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  togglePublicMint(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRecipients(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      name: string;
      imageUrl: string;
      recipientAddress: string;
      percentage: BigNumber;
    }
  >;

  callStatic: {
    COLLECTOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_APPROVAL_LIFESPAN(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<string>;

    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addDrop(
      id: BigNumberish,
      drop: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxSupply: BigNumberish;
        maxPerAddress: BigNumberish;
        maxPerAllowList: BigNumberish;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    airdrop(
      id: BigNumberish,
      count: BigNumberish,
      recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    approvalLifespans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    checkProHolder(
      collector: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, string] & {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumber;
        royaltiesRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    dropIdToFile(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    dropIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDrop(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[][],
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumber;
        allowListPrice: BigNumber;
        maxSupply: BigNumber;
        maxPerAddress: BigNumber;
        maxPerAllowList: BigNumber;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      }
    >;

    isAllowListActive(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContractSealed(overrides?: CallOverrides): Promise<boolean>;

    mint(
      id: BigNumberish,
      count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sealContract(overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalLifespanDays(
      lifespanDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAddress(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAllowList(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleAllowListMint(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    togglePublicMint(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        imageUrl: string;
        recipientAddress: string;
        percentage: BigNumber;
      }
    >;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    COLLECTOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_APPROVAL_LIFESPAN(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_FILTER_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDrop(
      id: BigNumberish,
      drop: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxSupply: BigNumberish;
        maxPerAddress: BigNumberish;
        maxPerAllowList: BigNumberish;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdrop(
      id: BigNumberish,
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvalLifespans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkProHolder(
      collector: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractData(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    dropIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dropIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDrop(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isAllowListActive(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContractSealed(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      id: BigNumberish,
      count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalLifespanDays(
      lifespanDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAddress(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAllowList(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleAllowListMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    togglePublicMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLECTOR_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_APPROVAL_LIFESPAN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_FILTER_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDrop(
      id: BigNumberish,
      drop: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxSupply: BigNumberish;
        maxPerAddress: BigNumberish;
        maxPerAllowList: BigNumberish;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdrop(
      id: BigNumberish,
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvalLifespans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkProHolder(
      collector: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dropIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dropIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDrop(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowListActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContractSealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      id: BigNumberish,
      count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalLifespanDays(
      lifespanDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAddress(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAllowList(
      id: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleAllowListMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    togglePublicMint(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
