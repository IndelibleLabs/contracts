/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IndelibleGenerativeInterface extends ethers.utils.Interface {
  functions: {
    "addLayer(uint256,string,uint256,tuple[],uint256)": FunctionFragment;
    "addTrait(uint256,uint256,(string,string,uint256,bytes,bool,bool,uint256))": FunctionFragment;
    "airdrop(uint256,address[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseSettings()": FunctionFragment;
    "baseURI()": FunctionFragment;
    "collectorFee()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getLinkedTraits(uint256,uint256)": FunctionFragment;
    "hashToMetadata(string)": FunctionFragment;
    "hashToSVG(string)": FunctionFragment;
    "initialize(string,string,uint256,(uint256,uint256,uint256,uint256,bytes32,bytes32,bool,bool,bool,string,string),(address,uint96),tuple[],address,address,uint256,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isRevealed()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(uint256,uint256,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "onAllowList(address,uint256,bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sealContract()": FunctionFragment;
    "setAllowListPrice(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setHashOverride(uint256,string)": FunctionFragment;
    "setLinkedTraits(tuple[])": FunctionFragment;
    "setMaxPerAddress(uint256)": FunctionFragment;
    "setMaxPerAllowList(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setPlaceholderImage(string)": FunctionFragment;
    "setPublicMintPrice(uint256)": FunctionFragment;
    "setRenderOfTokenId(uint256,bool)": FunctionFragment;
    "setRevealSeed()": FunctionFragment;
    "signatureMint((bytes32,bytes32,uint8),uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleAllowListMint()": FunctionFragment;
    "togglePublicMint()": FunctionFragment;
    "toggleWrapSVG()": FunctionFragment;
    "tokenIdToHash(uint256)": FunctionFragment;
    "tokenIdToSVG(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "traitData(uint256,uint256)": FunctionFragment;
    "traitDetails(uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifySignature(bytes32,(bytes32,bytes32,uint8))": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawRecipients(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLayer",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrait",
    values: [
      BigNumberish,
      BigNumberish,
      {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "airdrop",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "baseSettings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkedTraits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToMetadata",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hashToSVG", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      {
        maxPerAddress: BigNumberish;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxPerAllowList: BigNumberish;
        merkleRoot: BytesLike;
        tier2MerkleRoot: BytesLike;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      },
      { royaltyAddress: string; royaltyAmount: BigNumberish },
      { recipientAddress: string; percentage: BigNumberish }[],
      string,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onAllowList",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sealContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setHashOverride",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkedTraits",
    values: [{ traitA: BigNumberish[]; traitB: BigNumberish[] }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAllowList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlaceholderImage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicMintPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRenderOfTokenId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRevealSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signatureMint",
    values: [
      { r: BytesLike; s: BytesLike; v: BigNumberish },
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleAllowListMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePublicMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWrapSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToSVG",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traitData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traitDetails",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, { r: BytesLike; s: BytesLike; v: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRecipients",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addLayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTrait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkedTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashToSVG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRevealed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHashOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkedTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlaceholderImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenderOfTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRevealSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAllowListMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePublicMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWrapSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traitData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traitDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRecipients",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BatchMetadataUpdate(uint256,uint256)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MetadataUpdate(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BatchMetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetadataUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type BatchMetadataUpdateEvent = TypedEvent<
  [BigNumber, BigNumber] & { _fromTokenId: BigNumber; _toTokenId: BigNumber }
>;

export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    fromTokenId: BigNumber;
    toTokenId: BigNumber;
    from: string;
    to: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MetadataUpdateEvent = TypedEvent<
  [BigNumber] & { _tokenId: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class IndelibleGenerative extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndelibleGenerativeInterface;

  functions: {
    addLayer(
      index: BigNumberish,
      name: string,
      primeNumber: BigNumberish,
      _traits: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      _numberOfLayers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTrait(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      _trait: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdrop(
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseSettings(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        boolean,
        string,
        string
      ] & {
        maxPerAddress: BigNumber;
        publicMintPrice: BigNumber;
        allowListPrice: BigNumber;
        maxPerAllowList: BigNumber;
        merkleRoot: string;
        tier2MerkleRoot: string;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      }
    >;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    collectorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkedTraits(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<[string]>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _name: string,
      _symbol: string,
      _maxSupply: BigNumberish,
      _baseSettings: {
        maxPerAddress: BigNumberish;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxPerAllowList: BigNumberish;
        merkleRoot: BytesLike;
        tier2MerkleRoot: BytesLike;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      },
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevealed(overrides?: CallOverrides): Promise<[boolean]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      count: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onAllowList(
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowListPrice(
      allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHashOverride(
      tokenId: BigNumberish,
      tokenHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkedTraits(
      _linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAddress(
      maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAllowList(
      maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPlaceholderImage(
      placeholderImage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicMintPrice(
      publicMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRenderOfTokenId(
      tokenId: BigNumberish,
      renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRevealSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIdToHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenIdToSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    traitData(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    traitDetails(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, string, boolean] & {
          name: string;
          mimetype: string;
          occurrence: BigNumber;
          dataPointer: string;
          hide: boolean;
        }
      ]
    >;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
    >;
  };

  addLayer(
    index: BigNumberish,
    name: string,
    primeNumber: BigNumberish,
    _traits: {
      name: string;
      mimetype: string;
      occurrence: BigNumberish;
      data: BytesLike;
      hide: boolean;
      useExistingData: boolean;
      existingDataIndex: BigNumberish;
    }[],
    _numberOfLayers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTrait(
    layerIndex: BigNumberish,
    traitIndex: BigNumberish,
    _trait: {
      name: string;
      mimetype: string;
      occurrence: BigNumberish;
      data: BytesLike;
      hide: boolean;
      useExistingData: boolean;
      existingDataIndex: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdrop(
    count: BigNumberish,
    recipients: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    operator: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseSettings(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean,
      boolean,
      string,
      string
    ] & {
      maxPerAddress: BigNumber;
      publicMintPrice: BigNumber;
      allowListPrice: BigNumber;
      maxPerAllowList: BigNumber;
      merkleRoot: string;
      tier2MerkleRoot: string;
      isPublicMintActive: boolean;
      isAllowListActive: boolean;
      isContractSealed: boolean;
      description: string;
      placeholderImage: string;
    }
  >;

  baseURI(overrides?: CallOverrides): Promise<string>;

  collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkedTraits(
    layerIndex: BigNumberish,
    traitIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<string>;

  hashToSVG(_hash: string, overrides?: CallOverrides): Promise<string>;

  initialize(
    _name: string,
    _symbol: string,
    _maxSupply: BigNumberish,
    _baseSettings: {
      maxPerAddress: BigNumberish;
      publicMintPrice: BigNumberish;
      allowListPrice: BigNumberish;
      maxPerAllowList: BigNumberish;
      merkleRoot: BytesLike;
      tier2MerkleRoot: BytesLike;
      isPublicMintActive: boolean;
      isAllowListActive: boolean;
      isContractSealed: boolean;
      description: string;
      placeholderImage: string;
    },
    _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
    _withdrawRecipients: {
      recipientAddress: string;
      percentage: BigNumberish;
    }[],
    _indelibleSigner: string,
    _collectorFeeRecipient: string,
    _collectorFee: BigNumberish,
    _deployer: string,
    _operatorFilter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevealed(overrides?: CallOverrides): Promise<boolean>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    count: BigNumberish,
    max: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onAllowList(
    addr: string,
    max: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sealContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowListPrice(
    allowListPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHashOverride(
    tokenId: BigNumberish,
    tokenHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkedTraits(
    _linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAddress(
    maxPerAddress: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAllowList(
    maxPerAllowList: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPlaceholderImage(
    placeholderImage: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicMintPrice(
    publicMintPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRenderOfTokenId(
    tokenId: BigNumberish,
    renderOffChain: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRevealSeed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signatureMint(
    signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
    _nonce: BigNumberish,
    _quantity: BigNumberish,
    _maxPerAddress: BigNumberish,
    _mintPrice: BigNumberish,
    _collectorFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleAllowListMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  togglePublicMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleWrapSVG(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIdToHash(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenIdToSVG(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  traitData(
    layerIndex: BigNumberish,
    traitIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  traitDetails(
    layerIndex: BigNumberish,
    traitIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean] & {
      name: string;
      mimetype: string;
      occurrence: BigNumber;
      dataPointer: string;
      hide: boolean;
    }
  >;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifySignature(
    messageHash: BytesLike,
    signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRecipients(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
  >;

  callStatic: {
    addLayer(
      index: BigNumberish,
      name: string,
      primeNumber: BigNumberish,
      _traits: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      _numberOfLayers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrait(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      _trait: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    airdrop(
      count: BigNumberish,
      recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSettings(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        boolean,
        string,
        string
      ] & {
        maxPerAddress: BigNumber;
        publicMintPrice: BigNumber;
        allowListPrice: BigNumber;
        maxPerAllowList: BigNumber;
        merkleRoot: string;
        tier2MerkleRoot: string;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      }
    >;

    baseURI(overrides?: CallOverrides): Promise<string>;

    collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkedTraits(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<string>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<string>;

    initialize(
      _name: string,
      _symbol: string,
      _maxSupply: BigNumberish,
      _baseSettings: {
        maxPerAddress: BigNumberish;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxPerAllowList: BigNumberish;
        merkleRoot: BytesLike;
        tier2MerkleRoot: BytesLike;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      },
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevealed(overrides?: CallOverrides): Promise<boolean>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      count: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    onAllowList(
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sealContract(overrides?: CallOverrides): Promise<void>;

    setAllowListPrice(
      allowListPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;

    setHashOverride(
      tokenId: BigNumberish,
      tokenHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkedTraits(
      _linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAddress(
      maxPerAddress: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAllowList(
      maxPerAllowList: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlaceholderImage(
      placeholderImage: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicMintPrice(
      publicMintPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRenderOfTokenId(
      tokenId: BigNumberish,
      renderOffChain: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRevealSeed(overrides?: CallOverrides): Promise<void>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleAllowListMint(overrides?: CallOverrides): Promise<void>;

    togglePublicMint(overrides?: CallOverrides): Promise<void>;

    toggleWrapSVG(overrides?: CallOverrides): Promise<void>;

    tokenIdToHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenIdToSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traitData(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    traitDetails(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean] & {
        name: string;
        mimetype: string;
        occurrence: BigNumber;
        dataPointer: string;
        hide: boolean;
      }
    >;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "BatchMetadataUpdate(uint256,uint256)"(
      _fromTokenId?: null,
      _toTokenId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber }
    >;

    BatchMetadataUpdate(
      _fromTokenId?: null,
      _toTokenId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _fromTokenId: BigNumber; _toTokenId: BigNumber }
    >;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { fromTokenId: BigNumber; toTokenId: BigNumber; from: string; to: string }
    >;

    ConsecutiveTransfer(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { fromTokenId: BigNumber; toTokenId: BigNumber; from: string; to: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "MetadataUpdate(uint256)"(
      _tokenId?: null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    MetadataUpdate(
      _tokenId?: null
    ): TypedEventFilter<[BigNumber], { _tokenId: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addLayer(
      index: BigNumberish,
      name: string,
      primeNumber: BigNumberish,
      _traits: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      _numberOfLayers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTrait(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      _trait: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdrop(
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseSettings(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkedTraits(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToMetadata(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _maxSupply: BigNumberish,
      _baseSettings: {
        maxPerAddress: BigNumberish;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxPerAllowList: BigNumberish;
        merkleRoot: BytesLike;
        tier2MerkleRoot: BytesLike;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      },
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevealed(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      count: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onAllowList(
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowListPrice(
      allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHashOverride(
      tokenId: BigNumberish,
      tokenHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkedTraits(
      _linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAddress(
      maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAllowList(
      maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPlaceholderImage(
      placeholderImage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicMintPrice(
      publicMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRenderOfTokenId(
      tokenId: BigNumberish,
      renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRevealSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIdToHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traitData(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traitDetails(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLayer(
      index: BigNumberish,
      name: string,
      primeNumber: BigNumberish,
      _traits: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      _numberOfLayers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTrait(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      _trait: {
        name: string;
        mimetype: string;
        occurrence: BigNumberish;
        data: BytesLike;
        hide: boolean;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdrop(
      count: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      operator: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkedTraits(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToMetadata(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToSVG(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _maxSupply: BigNumberish,
      _baseSettings: {
        maxPerAddress: BigNumberish;
        publicMintPrice: BigNumberish;
        allowListPrice: BigNumberish;
        maxPerAllowList: BigNumberish;
        merkleRoot: BytesLike;
        tier2MerkleRoot: BytesLike;
        isPublicMintActive: boolean;
        isAllowListActive: boolean;
        isContractSealed: boolean;
        description: string;
        placeholderImage: string;
      },
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      count: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onAllowList(
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListPrice(
      allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHashOverride(
      tokenId: BigNumberish,
      tokenHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkedTraits(
      _linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAddress(
      maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAllowList(
      maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPlaceholderImage(
      placeholderImage: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicMintPrice(
      publicMintPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRenderOfTokenId(
      tokenId: BigNumberish,
      renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRevealSeed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdToHash(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traitData(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traitDetails(
      layerIndex: BigNumberish,
      traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
