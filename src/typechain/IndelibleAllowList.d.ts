/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IndelibleAllowListInterface extends ethers.utils.Interface {
  functions: {
    "addLayer(uint256,tuple[])": FunctionFragment;
    "addTrait(uint256,uint256,(string,string,bytes,bool,uint256))": FunctionFragment;
    "allowListPrice()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "contractData()": FunctionFragment;
    "contractURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "hashToMetadata(string)": FunctionFragment;
    "hashToSVG(string)": FunctionFragment;
    "isAllowListActive()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isContractSealed()": FunctionFragment;
    "isMintActive()": FunctionFragment;
    "isPublicMintActive()": FunctionFragment;
    "maxPerAddress()": FunctionFragment;
    "maxPerAllowList()": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(uint256,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "onAllowList(address,bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicMintPrice()": FunctionFragment;
    "reRollDuplicate(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sealContract()": FunctionFragment;
    "setAllowListPrice(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBackgroundColor(string)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setContractData((string,string,string,string,string,uint256,string))": FunctionFragment;
    "setLinkedTraits(tuple[])": FunctionFragment;
    "setMaxPerAddress(uint256)": FunctionFragment;
    "setMaxPerAllowList(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "setRenderOfTokenId(uint256,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toggleAllowListMint()": FunctionFragment;
    "togglePublicMint()": FunctionFragment;
    "toggleWrapSVG()": FunctionFragment;
    "tokenIdToHash(uint256)": FunctionFragment;
    "tokenIdToSVG(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "tokensAreDuplicates(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "traitData(uint256,uint256)": FunctionFragment;
    "traitDetails(uint256,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLayer",
    values: [
      BigNumberish,
      {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrait",
    values: [
      BigNumberish,
      BigNumberish,
      {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowListPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashToMetadata",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hashToSVG", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAllowListActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractSealed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPublicMintActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPerAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onAllowList",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicMintPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reRollDuplicate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sealContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowListPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBackgroundColor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setContractData",
    values: [
      {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkedTraits",
    values: [{ traitA: BigNumberish[]; traitB: BigNumberish[] }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPerAllowList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRenderOfTokenId",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleAllowListMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "togglePublicMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWrapSVG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToSVG",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensAreDuplicates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traitData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "traitDetails",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addLayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTrait", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowListPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashToSVG", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContractSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPublicMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPerAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reRollDuplicate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sealContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowListPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBackgroundColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkedTraits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPerAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenderOfTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleAllowListMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "togglePublicMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWrapSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAreDuplicates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traitData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "traitDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ConsecutiveTransfer(uint256,uint256,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsecutiveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type ConsecutiveTransferEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    fromTokenId: BigNumber;
    toTokenId: BigNumber;
    from: string;
    to: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class IndelibleAllowList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndelibleAllowListInterface;

  functions: {
    addLayer(
      _layerIndex: BigNumberish,
      traits: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTrait(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      trait: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowListPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    contractData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, string] & {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumber;
        royaltiesRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<[string]>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<[string]>;

    isAllowListActive(overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContractSealed(overrides?: CallOverrides): Promise<[boolean]>;

    isMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    isPublicMintActive(overrides?: CallOverrides): Promise<[boolean]>;

    maxPerAddress(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPerAllowList(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicMintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    reRollDuplicate(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowListPrice(
      _allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBackgroundColor(
      _backgroundColor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkedTraits(
      linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPerAllowList(
      _maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRenderOfTokenId(
      _tokenId: BigNumberish,
      _renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIdToHash(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenIdToSVG(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensAreDuplicates(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    traitData(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    traitDetails(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { name: string; mimetype: string }]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLayer(
    _layerIndex: BigNumberish,
    traits: {
      name: string;
      mimetype: string;
      data: BytesLike;
      useExistingData: boolean;
      existingDataIndex: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTrait(
    _layerIndex: BigNumberish,
    _traitIndex: BigNumberish,
    trait: {
      name: string;
      mimetype: string;
      data: BytesLike;
      useExistingData: boolean;
      existingDataIndex: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowListPrice(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  contractData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, string] & {
      name: string;
      description: string;
      image: string;
      banner: string;
      website: string;
      royalties: BigNumber;
      royaltiesRecipient: string;
    }
  >;

  contractURI(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<string>;

  hashToSVG(_hash: string, overrides?: CallOverrides): Promise<string>;

  isAllowListActive(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContractSealed(overrides?: CallOverrides): Promise<boolean>;

  isMintActive(overrides?: CallOverrides): Promise<boolean>;

  isPublicMintActive(overrides?: CallOverrides): Promise<boolean>;

  maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

  maxPerAllowList(overrides?: CallOverrides): Promise<BigNumber>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _count: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onAllowList(
    addr: string,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  publicMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  reRollDuplicate(
    tokenIdA: BigNumberish,
    tokenIdB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sealContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowListPrice(
    _allowListPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBackgroundColor(
    _backgroundColor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractData(
    _contractData: {
      name: string;
      description: string;
      image: string;
      banner: string;
      website: string;
      royalties: BigNumberish;
      royaltiesRecipient: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkedTraits(
    linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAddress(
    _maxPerAddress: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPerAllowList(
    _maxPerAllowList: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    newMerkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRenderOfTokenId(
    _tokenId: BigNumberish,
    _renderOffChain: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toggleAllowListMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  togglePublicMint(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleWrapSVG(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIdToHash(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenIdToSVG(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokensAreDuplicates(
    tokenIdA: BigNumberish,
    tokenIdB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  traitData(
    _layerIndex: BigNumberish,
    _traitIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  traitDetails(
    _layerIndex: BigNumberish,
    _traitIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { name: string; mimetype: string }>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLayer(
      _layerIndex: BigNumberish,
      traits: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addTrait(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      trait: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    allowListPrice(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    contractData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, string] & {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumber;
        royaltiesRecipient: string;
      }
    >;

    contractURI(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hashToMetadata(_hash: string, overrides?: CallOverrides): Promise<string>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<string>;

    isAllowListActive(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContractSealed(overrides?: CallOverrides): Promise<boolean>;

    isMintActive(overrides?: CallOverrides): Promise<boolean>;

    isPublicMintActive(overrides?: CallOverrides): Promise<boolean>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    publicMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    reRollDuplicate(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sealContract(overrides?: CallOverrides): Promise<void>;

    setAllowListPrice(
      _allowListPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBackgroundColor(
      _backgroundColor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkedTraits(
      linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPerAllowList(
      _maxPerAllowList: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRenderOfTokenId(
      _tokenId: BigNumberish,
      _renderOffChain: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toggleAllowListMint(overrides?: CallOverrides): Promise<void>;

    togglePublicMint(overrides?: CallOverrides): Promise<void>;

    toggleWrapSVG(overrides?: CallOverrides): Promise<void>;

    tokenIdToHash(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenIdToSVG(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensAreDuplicates(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traitData(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    traitDetails(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { name: string; mimetype: string }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "ConsecutiveTransfer(uint256,uint256,address,address)"(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { fromTokenId: BigNumber; toTokenId: BigNumber; from: string; to: string }
    >;

    ConsecutiveTransfer(
      fromTokenId?: BigNumberish | null,
      toTokenId?: null,
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { fromTokenId: BigNumber; toTokenId: BigNumber; from: string; to: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addLayer(
      _layerIndex: BigNumberish,
      traits: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTrait(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      trait: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowListPrice(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    contractData(overrides?: CallOverrides): Promise<BigNumber>;

    contractURI(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToMetadata(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashToSVG(_hash: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAllowListActive(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContractSealed(overrides?: CallOverrides): Promise<BigNumber>;

    isMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    isPublicMintActive(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxPerAllowList(overrides?: CallOverrides): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicMintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    reRollDuplicate(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowListPrice(
      _allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBackgroundColor(
      _backgroundColor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkedTraits(
      linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPerAllowList(
      _maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRenderOfTokenId(
      _tokenId: BigNumberish,
      _renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIdToHash(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToSVG(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensAreDuplicates(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traitData(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traitDetails(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLayer(
      _layerIndex: BigNumberish,
      traits: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTrait(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      trait: {
        name: string;
        mimetype: string;
        data: BytesLike;
        useExistingData: boolean;
        existingDataIndex: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowListPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToMetadata(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashToSVG(
      _hash: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowListActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContractSealed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMintActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublicMintActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPerAllowList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _count: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onAllowList(
      addr: string,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicMintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reRollDuplicate(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sealContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowListPrice(
      _allowListPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBackgroundColor(
      _backgroundColor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractData(
      _contractData: {
        name: string;
        description: string;
        image: string;
        banner: string;
        website: string;
        royalties: BigNumberish;
        royaltiesRecipient: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkedTraits(
      linkedTraits: { traitA: BigNumberish[]; traitB: BigNumberish[] }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAddress(
      _maxPerAddress: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPerAllowList(
      _maxPerAllowList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      newMerkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRenderOfTokenId(
      _tokenId: BigNumberish,
      _renderOffChain: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleAllowListMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    togglePublicMint(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleWrapSVG(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdToHash(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToSVG(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensAreDuplicates(
      tokenIdA: BigNumberish,
      tokenIdB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traitData(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traitDetails(
      _layerIndex: BigNumberish,
      _traitIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
