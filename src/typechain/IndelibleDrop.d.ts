/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IndelibleDropInterface extends ethers.utils.Interface {
  functions: {
    "addChunk(uint256,uint256,bytes)": FunctionFragment;
    "addToken((address[],string[][],string,string,string,uint256,uint256,bytes32,(uint256,uint256,uint256,uint256,bytes32)))": FunctionFragment;
    "airdrop(uint256,uint256,address[])": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "collectorFee()": FunctionFragment;
    "getChunk(uint256,uint256)": FunctionFragment;
    "getToken(uint256)": FunctionFragment;
    "initialize(string,string,(address,uint96),tuple[],address,address,uint256,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isMintActive(uint256)": FunctionFragment;
    "mint(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "name()": FunctionFragment;
    "numberOfTokens()": FunctionFragment;
    "onAllowList(uint256,address,uint256,bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyInfo(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setTokenSettings(uint256,(uint256,uint256,uint256,uint256,bytes32))": FunctionFragment;
    "signatureMint((bytes32,bytes32,uint8),uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenIdToFile(uint256)": FunctionFragment;
    "tokenIdToMetadata(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "verifySignature(bytes32,(bytes32,bytes32,uint8))": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawRecipients(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addChunk",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumberish;
        totalMinted: BigNumberish;
        tier2MerkleRoot: BytesLike;
        settings: {
          mintPrice: BigNumberish;
          maxPerAddress: BigNumberish;
          mintStart: BigNumberish;
          mintEnd: BigNumberish;
          merkleRoot: BytesLike;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "airdrop",
    values: [BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChunk",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      { royaltyAddress: string; royaltyAmount: BigNumberish },
      { recipientAddress: string; percentage: BigNumberish }[],
      string,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onAllowList",
    values: [BigNumberish, string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSettings",
    values: [
      BigNumberish,
      {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureMint",
    values: [
      { r: BytesLike; s: BytesLike; v: BigNumberish },
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdToFile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, { r: BytesLike; s: BytesLike; v: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRecipients",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChunk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRecipients",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export class IndelibleDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IndelibleDropInterface;

  functions: {
    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumberish;
        totalMinted: BigNumberish;
        tier2MerkleRoot: BytesLike;
        settings: {
          mintPrice: BigNumberish;
          maxPerAddress: BigNumberish;
          mintStart: BigNumberish;
          mintEnd: BigNumberish;
          merkleRoot: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    airdrop(
      id: BigNumberish,
      quantity: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    collectorFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string[],
          string[][],
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
            mintPrice: BigNumber;
            maxPerAddress: BigNumber;
            mintStart: BigNumber;
            mintEnd: BigNumber;
            merkleRoot: string;
          }
        ] & {
          chunks: string[];
          traits: string[][];
          mimetype: string;
          name: string;
          description: string;
          maxSupply: BigNumber;
          totalMinted: BigNumber;
          tier2MerkleRoot: string;
          settings: [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
            mintPrice: BigNumber;
            maxPerAddress: BigNumber;
            mintStart: BigNumber;
            mintEnd: BigNumber;
            merkleRoot: string;
          };
        }
      ]
    >;

    initialize(
      _name: string,
      _symbol: string,
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMintActive(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      id: BigNumberish,
      quantity: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberOfTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    onAllowList(
      id: BigNumberish,
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenSettings(
      id: BigNumberish,
      settings: {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _id: BigNumberish,
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
    >;
  };

  addChunk(
    id: BigNumberish,
    chunkIndex: BigNumberish,
    chunk: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: {
      chunks: string[];
      traits: string[][];
      mimetype: string;
      name: string;
      description: string;
      maxSupply: BigNumberish;
      totalMinted: BigNumberish;
      tier2MerkleRoot: BytesLike;
      settings: {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  airdrop(
    id: BigNumberish,
    quantity: BigNumberish,
    recipients: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

  getChunk(
    id: BigNumberish,
    chunkIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getToken(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string[],
      string[][],
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        mintPrice: BigNumber;
        maxPerAddress: BigNumber;
        mintStart: BigNumber;
        mintEnd: BigNumber;
        merkleRoot: string;
      }
    ] & {
      chunks: string[];
      traits: string[][];
      mimetype: string;
      name: string;
      description: string;
      maxSupply: BigNumber;
      totalMinted: BigNumber;
      tier2MerkleRoot: string;
      settings: [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        mintPrice: BigNumber;
        maxPerAddress: BigNumber;
        mintStart: BigNumber;
        mintEnd: BigNumber;
        merkleRoot: string;
      };
    }
  >;

  initialize(
    _name: string,
    _symbol: string,
    _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
    _withdrawRecipients: {
      recipientAddress: string;
      percentage: BigNumberish;
    }[],
    _indelibleSigner: string,
    _collectorFeeRecipient: string,
    _collectorFee: BigNumberish,
    _deployer: string,
    _operatorFilter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMintActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  mint(
    id: BigNumberish,
    quantity: BigNumberish,
    max: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  numberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

  onAllowList(
    id: BigNumberish,
    addr: string,
    max: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyInfo(
    _tokenId: BigNumberish,
    _salePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenSettings(
    id: BigNumberish,
    settings: {
      mintPrice: BigNumberish;
      maxPerAddress: BigNumberish;
      mintStart: BigNumberish;
      mintEnd: BigNumberish;
      merkleRoot: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signatureMint(
    signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
    _id: BigNumberish,
    _nonce: BigNumberish,
    _quantity: BigNumberish,
    _maxPerAddress: BigNumberish,
    _mintPrice: BigNumberish,
    _collectorFee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenIdToFile(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  tokenIdToMetadata(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  verifySignature(
    messageHash: BytesLike,
    signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRecipients(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
  >;

  callStatic: {
    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      token: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumberish;
        totalMinted: BigNumberish;
        tier2MerkleRoot: BytesLike;
        settings: {
          mintPrice: BigNumberish;
          maxPerAddress: BigNumberish;
          mintStart: BigNumberish;
          mintEnd: BigNumberish;
          merkleRoot: BytesLike;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    airdrop(
      id: BigNumberish,
      quantity: BigNumberish,
      recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

    getChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string[],
        string[][],
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          mintPrice: BigNumber;
          maxPerAddress: BigNumber;
          mintStart: BigNumber;
          mintEnd: BigNumber;
          merkleRoot: string;
        }
      ] & {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumber;
        totalMinted: BigNumber;
        tier2MerkleRoot: string;
        settings: [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          mintPrice: BigNumber;
          maxPerAddress: BigNumber;
          mintStart: BigNumber;
          mintEnd: BigNumber;
          merkleRoot: string;
        };
      }
    >;

    initialize(
      _name: string,
      _symbol: string,
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMintActive(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    mint(
      id: BigNumberish,
      quantity: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    numberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

    onAllowList(
      id: BigNumberish,
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenSettings(
      id: BigNumberish,
      settings: {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _id: BigNumberish,
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenIdToFile(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    tokenIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { recipientAddress: string; percentage: BigNumber }
    >;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      token: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumberish;
        totalMinted: BigNumberish;
        tier2MerkleRoot: BytesLike;
        settings: {
          mintPrice: BigNumberish;
          maxPerAddress: BigNumberish;
          mintStart: BigNumberish;
          mintEnd: BigNumberish;
          merkleRoot: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    airdrop(
      id: BigNumberish,
      quantity: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectorFee(overrides?: CallOverrides): Promise<BigNumber>;

    getChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintActive(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      id: BigNumberish,
      quantity: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfTokens(overrides?: CallOverrides): Promise<BigNumber>;

    onAllowList(
      id: BigNumberish,
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenSettings(
      id: BigNumberish,
      settings: {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _id: BigNumberish,
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      chunk: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: {
        chunks: string[];
        traits: string[][];
        mimetype: string;
        name: string;
        description: string;
        maxSupply: BigNumberish;
        totalMinted: BigNumberish;
        tier2MerkleRoot: BytesLike;
        settings: {
          mintPrice: BigNumberish;
          maxPerAddress: BigNumberish;
          mintStart: BigNumberish;
          mintEnd: BigNumberish;
          merkleRoot: BytesLike;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    airdrop(
      id: BigNumberish,
      quantity: BigNumberish,
      recipients: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectorFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChunk(
      id: BigNumberish,
      chunkIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _royaltySettings: { royaltyAddress: string; royaltyAmount: BigNumberish },
      _withdrawRecipients: {
        recipientAddress: string;
        percentage: BigNumberish;
      }[],
      _indelibleSigner: string,
      _collectorFeeRecipient: string,
      _collectorFee: BigNumberish,
      _deployer: string,
      _operatorFilter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintActive(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      id: BigNumberish,
      quantity: BigNumberish,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onAllowList(
      id: BigNumberish,
      addr: string,
      max: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyInfo(
      _tokenId: BigNumberish,
      _salePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenSettings(
      id: BigNumberish,
      settings: {
        mintPrice: BigNumberish;
        maxPerAddress: BigNumberish;
        mintStart: BigNumberish;
        mintEnd: BigNumberish;
        merkleRoot: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signatureMint(
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      _id: BigNumberish,
      _nonce: BigNumberish,
      _quantity: BigNumberish,
      _maxPerAddress: BigNumberish,
      _mintPrice: BigNumberish,
      _collectorFee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdToFile(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToMetadata(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySignature(
      messageHash: BytesLike,
      signature: { r: BytesLike; s: BytesLike; v: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRecipients(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
